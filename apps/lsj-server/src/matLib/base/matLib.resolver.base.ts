/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMatLibArgs } from "./CreateMatLibArgs";
import { UpdateMatLibArgs } from "./UpdateMatLibArgs";
import { DeleteMatLibArgs } from "./DeleteMatLibArgs";
import { MatLibCountArgs } from "./MatLibCountArgs";
import { MatLibFindManyArgs } from "./MatLibFindManyArgs";
import { MatLibFindUniqueArgs } from "./MatLibFindUniqueArgs";
import { MatLib } from "./MatLib";
import { MatLibService } from "../matLib.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MatLib)
export class MatLibResolverBase {
  constructor(
    protected readonly service: MatLibService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MatLib",
    action: "read",
    possession: "any",
  })
  async _matLibsMeta(
    @graphql.Args() args: MatLibCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MatLib])
  @nestAccessControl.UseRoles({
    resource: "MatLib",
    action: "read",
    possession: "any",
  })
  async matLibs(@graphql.Args() args: MatLibFindManyArgs): Promise<MatLib[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MatLib, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MatLib",
    action: "read",
    possession: "own",
  })
  async matLib(
    @graphql.Args() args: MatLibFindUniqueArgs
  ): Promise<MatLib | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MatLib)
  @nestAccessControl.UseRoles({
    resource: "MatLib",
    action: "create",
    possession: "any",
  })
  async createMatLib(@graphql.Args() args: CreateMatLibArgs): Promise<MatLib> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MatLib)
  @nestAccessControl.UseRoles({
    resource: "MatLib",
    action: "update",
    possession: "any",
  })
  async updateMatLib(
    @graphql.Args() args: UpdateMatLibArgs
  ): Promise<MatLib | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MatLib)
  @nestAccessControl.UseRoles({
    resource: "MatLib",
    action: "delete",
    possession: "any",
  })
  async deleteMatLib(
    @graphql.Args() args: DeleteMatLibArgs
  ): Promise<MatLib | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
